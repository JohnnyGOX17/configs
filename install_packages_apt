#!/bin/bash
# File              : install_packages_apt
# Author            : John Gentile <johncgentile17@gmail.com>
# Date              : 12.12.2017
# Last Modified Date: 14.02.2018
# Last Modified By  : John Gentile <johncgentile17@gmail.com>
#
# Shell script to install all needed development tools and software
# Run as root/sudo
#

# Colors for printing
RED='\033[1;31m'
BLU='\033[1;34m'
NC='\033[0m'

# Path to temporary installation directory
InsPath=/tmp/jginstall/

if [[ $EUID -ne 0 ]]; then
  printf "${RED}Error: This script must be run as root${NC}\n"
  exit 1
fi

if [[ $1 = "-h" ]]; then
  echo "Usage: ./install_packages_apt [-a]"
  echo -e "\t-a,\tInstall all packages including source based ones that may be redundant"
  exit 0
fi

printf "\n${BLU}Install started at:${NC} $(date)\n"
printf "${BLU}Creating temp directory at: ${NC}$InsPath\n\n"
mkdir -p $InsPath
pushd $InsPath


###############################################################################
# Add Optional Repos: Update and upgrade
###############################################################################

echo -e "\n${BLU}$(date +"%T"):${NC} Updating and Upgrading current apt repos\n"

# Install Clang 5.0 repo
# from https://askubuntu.com/questions/905205/installing-clang-5-0-and-using-c17
# remove list file if already there
[ -e /etc/apt/sources.list.d/llvm.list ] && rm /etc/apt/sources.list.d/llvm.list 
echo "deb http://apt.llvm.org/xenial/ llvm-toolchain-xenial-5.0 main" > /etc/apt/sources.list.d/llvm.list 
wget -O - http://apt.llvm.org/llvm-snapshot.gpg.key | sudo apt-key add -

# Install VirtualBox 5.2 from repo
# Use repo for Ubuntu 16.04 (Xenial); remove list file if already there
[ -e /etc/apt/sources.list.d/virtualbox.list ] && rm /etc/apt/sources.list.d/virtualbox.list
echo "deb http://download.virtualbox.org/virtualbox/debian xenial contrib" > /etc/apt/sources.list.d/virtualbox.list
wget -O - https://www.virtualbox.org/download/oracle_vbox_2016.asc | sudo apt-key add -

# Repo for Perforce- see https://www.perforce.com/perforce/doc.current/user/p4vnotes.txt
# remove list if already there
[ -e /etc/apt/sources.list.d/perforce.list ] && rm /etc/apt/sources.list.d/perforce.list
echo "deb http://package.perforce.com/apt/ubuntu/ xenial release" > /etc/apt/sources.list.d/perforce.list
wget -O - https://package.perforce.com/perforce.pubkey | sudo apt-key add -

# Repo for Brackets editor
add-apt-repository --yes ppa:webupd8team/brackets
add-apt-repository --yes ppa:js-reynaud/kicad-4

# Install Wine stable 2.0+ and Play on linux
dpkg --add-architecture i386
wget -nc https://dl.winehq.org/wine-builds/Release.key
apt-key add Release.key
apt-add-repository https://dl.winehq.org/wine-builds/ubuntu/
rm Release.key

# Update and pull in all new repos
apt update
# Use dist-upgrade to smart dependency changing and conflict resolution
apt -y dist-upgrade


###############################################################################
# Install Basic Development Parts & General Tools
###############################################################################

echo -e "\n${BLU}$(date +"%T"):${NC} Installing any apt applications\n"
# If certain programs/packages are not wanted they can be easily commented out
apt-get -y --install-recommends install autoconf \
  automake \
  brackets \
  build-essential \
  bzip2 \
  checkinstall \
  cifs-utils \
  clang-5.0 \
  clang-5.0-doc \
  clang-5.0-examples \
  cmake \
  curl \
  dkms \
  exuberant-ctags \
  ffmpegthumbnailer \
  g++ \
  gcc \
  git \
  helix-cli \
  helix-p4d \
  highlight \
  htop \
  ike \
  irssi \
  kicad \
  libevent-dev \
  lldb-5.0 \
  lld-5.0 \
  lm-sensors \
  make \
  mutt \
  nano \
  playonlinux \
  python-dev \
  python3-dev \
  ranger \
  shellcheck \
  silversearcher-ag \
  tcl \
  tree \
  unrar \
  urlview \
  virtualbox-5.2 \
  visualboyadvance \
  visualboyadvance-gtk \
  w3m \
  w3m-img \
  wget \
  winehq-stable \
  xclip

# Install npm packages requiring admin rights
echo -e "\n${BLU}$(date +"%T"):${NC} Installing npm applications\n"
npm install -g grunt-cli \
  gulp-cli \
  tmux-cpu \
  tmux-mem


###############################################################################
# Source-based installs
###############################################################################

if [[ $1 = "-a" ]]; then

  # Install tmux 2.6 from src
  wget https://github.com/tmux/tmux/releases/download/2.6/tmux-2.6.tar.gz
  tar -xzf tmux-2.6.tar.gz
  pushd tmux-2.6
  ./configure && make
  make install
  popd

  # Install Vim from src
  echo -e "\n${BLU}$(date +"%T"):${NC} Installing Vim from source\n"
  apt remove vim vim-common vim-runtime gvim
  git clone https://github.com/vim/vim.git
  pushd vim
  ./configure --with-features=huge \
    --enable-multibyte \
    --enable-rubyinterp=yes \
    --enable-pythoninterp=yes \
    --enable-perlinterp=yes
  # if weird, run this process as regular user then run `make install` as sudo
  make VIMRUNTIMEDIR=/usr/local/share/vim/vim80
  make install
  # sometimes `sudo` is removed with vim
  apt install -y sudo
  hash vim
  popd

  # Go- remove older Go 1st (if there) then install (note DL link should be
  # checked for updates)
  echo -e "\n${BLU}$(date +"%T"):${NC} Installing Go from source\n"
  rm -rf /usr/local/go
  wget https://storage.googleapis.com/golang/go1.9.linux-amd64.tar.gz
  tar -C /usr/local/ -xzf go1.9.linux-amd64.tar.gz
  rm -f go1.9.linux-amd64.tar.gz

  # Install Rust
  echo -e "\n${BLU}$(date +"%T"):${NC} Installing Rust from source\n"
  curl https://sh.rustup.rs -sSf | sh


  # Install facebook PathPicker
  # Note: this app install location can change
  pushd /usr/local/
  git clone https://github.com/facebook/PathPicker.git
  # Note: absolute path could be changed to relative $(pwd) to be more dynamic
  ln -s /usr/local/PathPicker/fpp /usr/local/bin/fpp
  popd

  #TODO: add custom Google Fonts from www.fonts.google.com
  
fi


###############################################################################
# Clean & exit
###############################################################################

printf "\n${BLU}$(date +"%T"):${NC} Deleting temp directory at $InsPath\n"
popd
rm -rf $InsPath*
apt -y autoremove
printf "\n${BLU}$(date +"%T"):${NC} DONE!... Installs and updates successful${NC}\n\n"
