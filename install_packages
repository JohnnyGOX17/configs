#!/usr/bin/env bash
#
# Shell script to install all needed development tools and software
# Run as root/sudo
#

# Colors for printing
RED='\033[1;31m'
BLU='\033[1;34m'
NC='\033[0m'

# Path to temporary installation directory
insPath=/tmp/auto_sys_install/

# Simple error handler function to print to stderr
err() {
  echo -e "${RED}[$(date +"%T")] ERROR:${NC} $@" >&2
  exit 1
}

# Simple message handler function
msg() {
  echo -e "\n${BLU}[$(date +"%T")]:${NC} $@\n"
}

if [[ $1 = "-h" ]]; then
  echo "Usage: ./install_packages [-a]"
  echo -e "\t-a,\tInstall all packages including source based ones that may be redundant"
  exit 0
fi

if [[ $EUID -ne 0 ]]; then
  err "This script must be run as root, exiting!"
fi


if command -v apt > /dev/null; then
  pkgApp=apt
elif command -v yum > /dev/null; then
  pkgApp=yum
elif command -v dnf > /dev/null; then # meant for modern Fedora distro
  pkgApp=dnf
elif [ "$(uname -s)" = "Darwin" ]; then
  pkgApp=brew
else
  err "No supported package manager recognized, exiting!"
fi
msg "Using $pkgApp pakage manager for installation"

msg "Install started at: $(date)"
msg "Creating temp directory at: $insPath\n"
mkdir -p $insPath
pushd $insPath


###############################################################################
# Add Optional Repos: Update and upgrade
###############################################################################

msg "Updating current repo lists and adding any additional groups"

if [ "$pkgApp" = "apt" ]; then
  # Brackets editor
  apt-add-repository --yes ppa:webupd8team/brackets

  # Clang 5.0 repo
  # from https://askubuntu.com/questions/905205/installing-clang-5-0-and-using-c17
  echo "deb http://apt.llvm.org/xenial/ llvm-toolchain-xenial-5.0 main" > /etc/apt/sources.list.d/llvm.list
  wget -O - http://apt.llvm.org/llvm-snapshot.gpg.key | apt-key add -

  # Google Chrome repo
  echo "deb [arch=amd64] http://dl.google.com/linux/chrome/deb/ stable main" > /etc/apt/sources.list.d/google-chrome.list
  wget -O - https://dl-ssl.google.com/linux/linux_signing_key.pub | apt-key add -

  # KiCAD schematic & layout editor
  apt-add-repository --yes ppa:js-reynaud/kicad-4

  # Perforce- see https://www.perforce.com/perforce/doc.current/user/p4vnotes.txt
  echo "deb http://package.perforce.com/apt/ubuntu/ xenial release" > /etc/apt/sources.list.d/perforce.list
  wget -O - https://package.perforce.com/perforce.pubkey | apt-key add -

  # Remmina Remote Desktop
  apt-add-repository --yes ppa:remmina-ppa-team/remmina-next

  # Spotify music player repo
  apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys 0DF731E45CE24F27EEEB1450EFDC8610341D9410
  echo "deb http://repository.spotify.com stable non-free" > /etc/apt/sources.list.d/spotify.list

  # VirtualBox 5.x- use repo for Ubuntu 16.04 (Xenial)
  echo "deb http://download.virtualbox.org/virtualbox/debian xenial contrib" > /etc/apt/sources.list.d/virtualbox.list
  wget -O - https://www.virtualbox.org/download/oracle_vbox_2016.asc | apt-key add -

  # Wine stable 2.0+ and Play on linux
  dpkg --add-architecture i386
  wget -nc https://dl.winehq.org/wine-builds/Release.key
  apt-key add Release.key
  apt-add-repository --yes https://dl.winehq.org/wine-builds/ubuntu/
  rm Release.key

  # Weechat
  sh -c 'echo "deb https://weechat.org/ubuntu $(lsb_release -cs) main" >>  /etc/apt/sources.list.d/weechat.list'
  apt-key adv --keyserver keys.gnupg.net --recv-keys

  # Update and pull in all new repos
  apt update
  # Use dist-upgrade to smart dependency changing and conflict resolution
  apt -y dist-upgrade

elif [ "$pkgApp" = "yum" ]; then
  # Clear the yum cache and upgrade (update and remove obsolete packages)
  yum clean all
  yum -y upgrade
  yum -y install epel-release

elif [ "$pkgApp" = "brew" ]; then
  # Install `brew` package manager (https://brew.sh/)
  msg "Installing brew"
  /usr/bin/ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"
  brew install cask
  brew update
elif [ "$pkgApp" = "dnf" ]; then
  dnf -y upgrade

  # Google chrome repo
  dnf install -y fedora-workstation-repositories
fi


###############################################################################
# Install Basic Development Parts & General Tools
###############################################################################

# NOTE: If certain programs/packages are not wanted they can be easily commented out
msg "Installing applications using $pkgApp"

# TODO: consolidate common package names
if [ "$pkgApp" = "apt" ]; then
  apt-get -y --install-recommends install \
    autoconf \
    automake \
    bash-completion \
    bear \
    brackets \
    build-essential \
    bzip2 \
    checkinstall \
    cifs-utils \
    clang \
    clang-5.0 \
    clang-5.0-doc \
    clang-5.0-examples \
    cmake \
    curl \
    dkms \
    doxygen \
    editorconfig \
    exuberant-ctags \
    ffmpegthumbnailer \
    filezilla \
    g++ \
    gcc \
    git \
    gnat-5 \
    google-chrome-stable \
    graphviz \
    gtkwave \
    helix-cli \
    helix-p4d \
    highlight \
    htop \
    ike \
    irssi \
    kicad \
    libelf-dev \
    libevent-dev \
    libvirt-bin \
    lldb-5.0 \
    lld-5.0 \
    llvm \
    lm-sensors \
    make \
    mutt \
    nano \
    nmap \
    playonlinux \
    python-dev \
    python3-dev \
    python-pydot \
    python-pydot-ng \
    python-sphinx \
    qemu \
    qemu-kvm \
    ranger \
    remmina \
    remmina-plugin-rdp \
    remmina-plugin-secret \
    scrot \
    shellcheck \
    silversearcher-ag \
    spotify-client \
    tcl \
    tree \
    unrar \
    urlview \
    virtualbox-5.2 \
    visualboyadvance \
    visualboyadvance-gtk \
    vlc \
    w3m \
    w3m-img \
    weechat \
    wget \
    winehq-stable \
    xclip

  apt -y autoremove

elif [ "$pkgApp" = "yum" ]; then
  yum -y install yum-utils
  yum -y groupinstall "Development Tools" \
  "Compatibility Libraries" \
  #"GNOME Desktop" \
  "Security Tools" \
  "System Administration Tools"
  yum -y install apr-devel \
    apr-util-cdevel \
    autoconf \
    automake \
    bash-completion \
    bison \
    bzip2 \
    centos-release-scl \
    cifs-utils \
    clang \
    clang-analyzer \
    clang-devel \
    cmake \
    devtoolset-7 \
    curl \
    curl-devel \
    g++ \
    gcc \
    gcc-c++ \
    git-core \
    htop \
    httpd \
    httpd-devel \
    ibutils \
    infiniband-diags \
    kernel-devel \
    kernel-doc \
    libelf-devel \
    libffi-devel \
    libibcommon \
    libibverbs \
    libibverbs-utils \
    libtool \
    libyaml-devel \
    llvm \
    llvm-devel \
    llvm-libs \
    llvm-toolset-7 \
    llvm-toolset-7-clang-analyzer \
    llvm-toolset-7-clang-tools-extra \
    make \
    nano \
    nmap \
    nodejs \
    npm \
    openssl-devel \
    patch \
    perftest \
    python-devel \
    python34 \
    python34-devel \
    qemu \
    qemu-kvm \
    qperf \
    readline \
    readline-devel \
    sqlite-devel \
    tmux \
    vim \
    vnc-server \
    vsftpd \
    weechat \
    wget \
    zlib \
    zlib-devel

  # Enable Clang 5.x tools
  scl enable devtoolset-7 llvm-toolset-7 bash

elif [ "$pkgApp" = "dnf" ]; then
  # Assuming standard, modern Fedora install
  dnf -y groupinstall "Development Tools" \
  "C Development Tools and Libraries"
  dnf -y install \
    acpid \
    apr-devel \
    bear \
    cargo \
    clang \
    clang-analyzer \
    clang-devel \
    cmake \
    csbuild \
    curl-devel \
    dkms \
    ghdl \
    golang \
    google-chrome-stable \
    htop \
    httpd-devel \
    infiniband-diags \
    irssi \
    kernel-devel \
    kernel-headers \
    libibverbs-utils \
    libyaml-devel \
    libXi-devel \
    libXmu-devel \
    libX11-devel \
    llvm \
    llvm-devel \
    lm_sensors \
    mediawriter \
    mesa-libGLU-devel \
    mutt \
    nano \
    nmap \
    nodejs \
    openssl-devel \
    perl \
    powerline-fonts \
    python-devel \
    qemu \
    qemu-kvm \
    ranger \
    readline-devel \
    ruby-devel \
    rust \
    sqlite-devel \
    the_silver_searcher \
    tmux \
    vim \
    vim-X11 \
    vsftpd \
    xclip

  # Follow steps to install NVIDIA drivers like: https://www.if-not-true-then-false.com/2015/fedora-nvidia-guide/
  # And/or install CUDA: https://www.if-not-true-then-false.com/2018/install-nvidia-cuda-toolkit-on-fedora/

  # SSH not started by default
  systemctl start sshd.service
  systemctl enable sshd.service

elif [ "$pkgApp" = "brew" ]; then
  brew cask install \
    google-chrome \
    iterm2 \
    visual-studio-code \
    vlc

  brew install \
    bash \
    bash-completion \
    binutils \
    cmake \
    coreutils \
    ctags \
    diffutils \
    doxygen \
    ed --with-default-names \
    editorconfig \
    file-formula \
    findutils --with-default-names \
    fpp \
    gawk \
    gdb \
    git \
    gnu-indent --with-default-names \
    gnu-sed --with-default-names \
    gnu-tar --with-default-names \
    gnu-which --with-default-names \
    gnutls \
    gpatch \
    grep --with-default-names \
    gzip \
    htop \
    icarus-verilog \
    irssi \
    less \
    m4 \
    make \
    mono \
    mutt \
    nano \
    nmap \
    node \
    openssh \
    perl \
    pidof \
    python \
    # `python` should now default to Python 3 in brew
    python@2 \
    ranger \
    reattach-to-user-namespace \
    rsync \
    svn \
    tcl-tk \
    the_silver_searcher \
    tmux \
    tree \
    unzip \
    vim --override-system-vi \
    # macvim --override-system-vim --custom-system-icons \
    wakeonlan \
    watch \
    wdiff --with-gettext \
    weechat \
    wget

  msg "install Java Dev Kit: http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html"
  brew cleanup

fi

msg "Installing npm packages"
npm install -g grunt-cli \
  gulp-cli \
  write-good

###############################################################################
# Source-based installs
###############################################################################

if [[ $1 = "-a" ]]; then

  # Facebook PathPicker install
  # Note: this app install location can change
  msg "Installing Facebook PathPicker from source..."
  pushd /usr/local/
  git clone https://github.com/facebook/PathPicker.git
  # Note: absolute path could be changed to relative $(pwd) to be more dynamic
  ln -s /usr/local/PathPicker/fpp /usr/local/bin/fpp
  popd

  # GHDL- FOSS VHDL compiler & simulator
  if [ "$pkgApp" != "dnf" ]; then
    msg "Installing GHDL from source..."
    git clone https://github.com/ghdl/ghdl.git
    mkdir ./ghdl/build
    pushd ./ghdl/build
    ../configure --with-llvm-config --prefix=/usr/local
    make && make install
    popd
  fi

  ## TODO: verify for distros other than fedora
  # Go- remove older Go 1st (if there) then install (note DL link should be
  # checked for updates)
  #msg "Installing Go from source..."
  #rm -rf /usr/local/go
  #TODO: figure out per system install from https://golang.org/doc/install
  #wget https://storage.googleapis.com/golang/go1.9.linux-amd64.tar.gz
  #tar -C /usr/local/ -xzf go1.9.linux-amd64.tar.gz

  # Mono-project repo & install #TODO: Ubuntu & MacOS install method
  if [ "$pkgApp" = "yum" ]; then
    echo "Installing Mono-Project"
    rpm --import "http://keyserver.ubuntu.com/pks/lookup?op=get&search=0x3FA7E0328081BFF6A14DA29AA6A19B38D3D831EF"
    yum-config-manager --add-repo http://download.mono-project.com/repo/centos7/
    yum install -y mono-devel
  elif [ "$pkgApp" != "dnf" ]; then
    echo "Installing Mono-Project"
    rpm --import "http://keyserver.ubuntu.com/pks/lookup?op=get&search=0x3FA7E0328081BFF6A14DA29AA6A19B38D3D831EF"
    su -c 'curl https://download.mono-project.com/repo/centos8-stable.repo | tee /etc/yum.repos.d/mono-centos8-stable.repo'
    dnf update
    dnf install -y mono-devel
  fi

  # Rust install
  if [ "$pkgApp" != "dnf" ]; then
    msg "Installing Rust from source..."
    curl https://sh.rustup.rs -sSf | sh
  fi

  # tmux 2.6 install from src
  if [ "$pkgApp" != "brew" ] || [ "$pkgApp" != "dnf" ]; then
    msg "Installing tmux from source..."
    wget https://github.com/tmux/tmux/releases/download/2.6/tmux-2.6.tar.gz
    tar -xzf tmux-2.6.tar.gz
    pushd tmux-2.6
    ./configure && make
    make install
    popd
  fi

  # Vim install from src w/clipboard & python support
  if [ "$pkgApp" != "brew" ] || [ "$pkgApp" != "dnf" ]; then
    msg "Installing Vim from source..."
    # NOTE: remove shipping Vim
    if [ "$pkgApp" = "apt" ]; then
      apt remove vim vim-common vim-runtime gvim
      apt build-dep vim
    elif [ "$pkgApp" = "yum" ]; then
      yum remove vim-enhanced vim-common vim-minimal
      yum-builddep vim
    fi
    git clone https://github.com/vim/vim.git
    pushd vim
    ./configure --with-features=huge \
      --enable-multibyte \
      --enable-rubyinterp=yes \
      --enable-pythoninterp=yes \
      --enable-perlinterp=yes \
      --enable-gui=auto \
      --enable-gtk2-check \
      --with-x
    # if weird, run this process as regular user then run `make install` as sudo
    # If installing for single user (no `make install`) VIMRUNTIMEDIR can == {vim_src}/runtime
    make VIMRUNTIMEDIR=/usr/local/share/vim/vim80
    # if installing manually, this is the only command needing root privileges
    make install
    # sometimes `sudo` is removed with vim
    if [ "$pkgApp" = "apt" ]; then
      apt install -y sudo
    elif [ "$pkgApp" = "yum" ]; then
      yum install -y sudo
    fi
    hash vim
    popd
  fi

  # Ranger file manager (doesn't install in CentOS packages)
  if [ "$pkgApp" = "yum" ]; then
    wget http://nongnu.org/ranger/ranger-stable.tar.gz
    tar xvf ranger-stable.tar.gz
    pushd ranger-stable
    make install
    popd
  fi

  #TODO: add custom Google Fonts from www.fonts.google.com for some distros

fi


###############################################################################
# Clean & exit
###############################################################################

msg "Deleting temp directory at $insPath"
popd
rm -rf $insPath*
msg "\nDONE!... Installs and updates successful\n"
