#!/usr/bin/env bash
#
# Shell script to install all needed development tools and software
# Run as regular user
#
# -John Gentile
#

# exit on error
set -e

# Colors for printing
RED='\033[1;31m'
BLU='\033[1;34m'
NC='\033[0m'

# Path to temporary installation directory
insPath=/tmp/auto_sys_install/
# Path to where script was executed
execPath=$(pwd)

# Simple error handler function to print to stderr
err() {
  echo -e "${RED}[$(date +"%T")] ERROR:${NC} $@" >&2
  exit 1
}

# Simple message handler function
msg() {
  echo -e "\n${BLU}[$(date +"%T")]:${NC} $@\n"
}

if [[ $1 = "-h" ]]; then
  echo "Usage: ./install_packages"
  echo -e "\tInstall all packages"
  exit 0
fi

# Individual commands needing privilege scripted as sudo
if [[ $EUID -eq 0 ]]; then
  err "This script should be run as a regular user, exiting!"
fi


# Figure out what system and package manager we're using
# NOTE: for macOS, need to install brew beforehand https://brew.sh
if [ "$(uname -s)" = "Darwin" ]; then
  pkgApp=brew
elif command -v apt > /dev/null; then
  pkgApp=apt
elif command -v dnf > /dev/null; then # meant for modern Fedora distro
  pkgApp=dnf
elif command -v yum > /dev/null; then
  pkgApp=yum
else
  err "No supported package manager recognized, exiting!"
fi
msg "Using $pkgApp pakage manager for installation"

msg "Install started at: $(date)"
msg "Creating temp directory at: $insPath\n"
mkdir -p $insPath
pushd $insPath > /dev/null


###############################################################################
msg "Add Optional Repos: Update and upgrade"
###############################################################################

msg "Updating current repo lists and adding any additional groups"

if [ "$pkgApp" = "apt" ]; then
  # prerequisites
  sudo apt install apt-transport-https curl gnupg

  # NOTE: a lot of these are out of date!

  # NOTE: for Neovim, suggested to use [snap install](https://github.com/neovim/neovim/wiki/Installing-Neovim#snap)
  # Neovim ppa
  #sudo apt-add-repository --yes ppa:neovim-ppa/stable

  # Brackets editor
  sudo apt-add-repository --yes ppa:webupd8team/brackets

  # Clang 5.0 repo
  # from https://askubuntu.com/questions/905205/installing-clang-5-0-and-using-c17
  echo "deb http://apt.llvm.org/xenial/ llvm-toolchain-xenial-5.0 main" > /etc/apt/sources.list.d/llvm.list
  wget -O - http://apt.llvm.org/llvm-snapshot.gpg.key | apt-key add -

  # Google Chrome repo
  echo "deb [arch=amd64] http://dl.google.com/linux/chrome/deb/ stable main" > /etc/apt/sources.list.d/google-chrome.list
  wget -O - https://dl-ssl.google.com/linux/linux_signing_key.pub | apt-key add -

  # KiCAD schematic & layout editor
  apt-add-repository --yes ppa:js-reynaud/kicad-4

  # Spotify music player repo
  apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys 0DF731E45CE24F27EEEB1450EFDC8610341D9410
  echo "deb http://repository.spotify.com stable non-free" > /etc/apt/sources.list.d/spotify.list

  # VirtualBox 5.x- use repo for Ubuntu 16.04 (Xenial)
  echo "deb http://download.virtualbox.org/virtualbox/debian xenial contrib" > /etc/apt/sources.list.d/virtualbox.list
  wget -O - https://www.virtualbox.org/download/oracle_vbox_2016.asc | apt-key add -
  msg "NOTE: VirtualBox Extension pack still needs to be manually installed since covered by different, Oracle license"

  # Wine stable 2.0+ and Play on linux
  dpkg --add-architecture i386
  wget -nc https://dl.winehq.org/wine-builds/Release.key
  apt-key add Release.key
  apt-add-repository --yes https://dl.winehq.org/wine-builds/ubuntu/
  rm Release.key

  # Weechat
  sh -c 'echo "deb https://weechat.org/ubuntu $(lsb_release -cs) main" >>  /etc/apt/sources.list.d/weechat.list'
  apt-key adv --keyserver keys.gnupg.net --recv-keys

  # Bazel
  curl -fsSL https://bazel.build/bazel-release.pub.gpg | gpg --dearmor > bazel.gpg
  sudo mv bazel.gpg /etc/apt/trusted.gpg.d/
  echo "deb [arch=amd64] https://storage.googleapis.com/bazel-apt stable jdk1.8" | sudo tee /etc/apt/sources.list.d/bazel.list

  # Note.js (https://github.com/nodesource/distributions/blob/master/README.md#debinstall)
  curl -fsSL https://deb.nodesource.com/setup_17.x | sudo -E bash -
  sudo apt-get install -y nodejs

  # Update and pull in all new repos
  sudo apt update
  # Use dist-upgrade to smart dependency changing and conflict resolution
  sudo apt -y dist-upgrade

elif [ "$pkgApp" = "yum" ]; then
  sudo yum -y install yum-utils

  #msg "Installing Google chrome repo file"
  #sudo cat << EOF > /etc/yum.repos.d/google-chrome.repo
  #[google-chrome]
  #name=google-chrome
  #baseurl=http://dl.google.com/linux/chrome/rpm/stable/x86_64
  #enabled=1
  #gpgcheck=1
  #gpgkey=https://dl.google.com/linux/linux_signing_key.pub
  #EOF

  msg "Installing latest VirtualBox repo file"
  sudo wget http://download.virtualbox.org/virtualbox/rpm/rhel/virtualbox.repo -P /etc/yum.repos.d/
  msg "NOTE: VirtualBox Extension pack still needs to be manually installed since covered by different, Oracle license"

  msg "Install VSCode repos"
  sudo rpm --import https://packages.microsoft.com/keys/microsoft.asc
  sudo sh -c 'echo -e "[code]\nname=Visual Studio Code\nbaseurl=https://packages.microsoft.com/yumrepos/vscode\nenabled=1\ngpgcheck=1\ngpgkey=https://packages.microsoft.com/keys/microsoft.asc" > /etc/yum.repos.d/vscode.repo'

  msg "Installing Docker repos"
  sudo yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo

  msg "yum upgrade (update and remove obsolete packages)"
  # Clean cache if needed:
  # sudo yum clean all
  sudo yum -y upgrade
  sudo yum -y install epel-release

elif [ "$pkgApp" = "brew" ]; then
  # Install `brew` package manager (https://brew.sh/) if not yet present
  if command -v brew > /dev/null; then
    msg "Brew already present, continuing..."
  else
    msg "Installing Brew package manager..."
    /usr/bin/ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"
    brew install cask
    brew update
  fi

elif [ "$pkgApp" = "dnf" ]; then
  msg "Installing Google chrome repo file"
  sudo dnf install -y fedora-workstation-repositories
  sudo dnf config-manager --set-enabled google-chrome

  msg "Installing latest VirtualBox repo file"
  sudo wget http://download.virtualbox.org/virtualbox/rpm/fedora/virtualbox.repo -P /etc/yum.repos.d/
  msg "NOTE: VirtualBox Extension pack still needs to be manually installed since covered by different, Oracle license"

  msg "Installing VSCode repos"
  sudo rpm --import https://packages.microsoft.com/keys/microsoft.asc
  sudo sh -c 'echo -e "[code]\nname=Visual Studio Code\nbaseurl=https://packages.microsoft.com/yumrepos/vscode\nenabled=1\ngpgcheck=1\ngpgkey=https://packages.microsoft.com/keys/microsoft.asc" > /etc/yum.repos.d/vscode.repo'

  msg "Installing Docker repo"
  sudo dnf config-manager --add-repo https://download.docker.com/linux/fedora/docker-ce.repo

  sudo dnf -y upgrade

fi


###############################################################################
msg "Install Basic Development Parts & General Tools"
###############################################################################

# NOTE: If certain programs/packages are not wanted they can be easily commented out
msg "Installing applications using $pkgApp"

# path/executable for python/pip install
pythonExe=""

if [ "$pkgApp" = "apt" ]; then
  sudo apt-get -y --install-recommends install \
    autoconf \
    automake \
    bash-completion \
    bazel \
    bear \
    bison \
    brackets \
    build-essential \
    bzip2 \
    calibre \
    ccache \
    checkinstall \
    cifs-utils \
    clang \
    clang-5.0 \
    clang-5.0-doc \
    clang-5.0-examples \
    cmake \
    curl \
    device-tree-compiler \
    dkms \
    doxygen \
    editorconfig \
    exuberant-ctags \
    fail2ban \
    fd-find \
    ffmpegthumbnailer \
    filezilla \
    flex \
    g++ \
    gcc \
    gdb \
    gdb-multiarch \
    gimp \
    gir1.2-clutter-1.0 \
    gir1.2-gtop-2.0 \
    gir1.2-nm-1.0 \
    git \
    gnat \
    gnat-5 \
    gnome-system-monitor \
    gnuradio \
    google-chrome-stable \
    gqrx-sdr \
    graphviz \
    gtkwave \
    helix-cli \
    helix-p4d \
    help2man \
    highlight \
    htop \
    hugo \
    ike \
    irssi \
    iverilog \
    kicad \
    latexmk \
    libelf-dev \
    libevent-dev \
    libgtk-3-dev \
    libgoogle-perftools-dev \
    libmagic-dev \
    libsynctex-dev \
    libusb-1.0-0-dev \
    libvirt-bin \
    lldb-5.0 \
    lld-5.0 \
    llvm \
    lm-sensors \
    make \
    menulibre \
    minicom \
    mutt \
    nano \
    nasm \
    neovim \
    nmap \
    npm \
    numactl \
    okular \
    openocd \
    pandoc \
    perl-doc \
    playonlinux \
    python-dev \
    python3-dev \
    python3-matplotlib \
    python3-pip \
    python-pydot \
    python-pydot-ng \
    python-sphinx \
    python3-venv \
    qemu \
    qemu-kvm \
    qemu-system-arm \
    ranger \
    remmina \
    remmina-plugin-rdp \
    remmina-plugin-secret \
    ripgrep \
    ruby \
    scrot \
    shellcheck \
    silversearcher-ag \
    spotify-client \
    stress \
    tcl \
    texlive-full \
    tree \
    unrar \
    urlview \
    virtualbox-5.2 \
    visualboyadvance \
    visualboyadvance-gtk \
    vlc \
    w3m \
    w3m-img \
    wakeonlan \
    weechat \
    wget \
    wine \
    xclip \
    zathura \
    zlib1g-dev

  sudo apt -y autoremove

  # snap installs
  snap install netron

  pythonExe="pip3"

elif [ "$pkgApp" = "yum" ]; then
  sudo yum -y groupinstall "Development Tools" \
    "Compatibility Libraries" \
    "Security Tools" \
    "System Administration Tools"

  sudo yum install -y \
    apr-devel \
    apr-util-cdevel \
    autoconf \
    automake \
    bash-completion \
    bison \
    bzip2 \
    calibre \
    centos-release-scl \
    cifs-utils \
    clang \
    clang-analyzer \
    clang-devel \
    cmake \
    code \
    containerd.io \
    ctags \
    curl \
    curl-devel \
    device-mapper-persistent-data \
    devtoolset-8 \
    docker-ce \
    docker-ce-cli \
    fd-find \
    g++ \
    gcc \
    gcc-arm-linux-gnu \
    gcc-c++ \
    gimp \
    git-core \
    gnome-tweaks \
    gnuradio \
    google-chrome-stable \
    gtkwave \
    htop \
    httpd \
    httpd-devel \
    hugo \
    ibutils \
    infiniband-diags \
    kernel-devel \
    kernel-doc \
    libelf-devel \
    libffi-devel \
    libibcommon \
    libibverbs \
    libibverbs-utils \
    libtool \
    libyaml-devel \
    llvm \
    llvm-devel \
    llvm-libs \
    llvm-toolset-7 \
    llvm-toolset-7-build \
    llvm-toolset-7-clang-analyzer \
    llvm-toolset-7-clang-devel \
    llvm-toolset-7-clang-tools-extra \
    llvm-toolset-7-llvm-devel \
    lvm2 \
    make \
    minicom \
    nano \
    nasm \
    neovim \
    nmap \
    nodejs \
    npm \
    okular \
    openssl-devel \
    patch \
    perftest \
    python-devel \
    python34 \
    python34-devel \
    python3-neovim \
    python3-matplotlib \
    qemu \
    qemu-kvm \
    qperf \
    readline \
    readline-devel \
    ShellCheck \
    sqlite-devel \
    stress \
    the_silver_searcher \
    tmux \
    vim \
    VirtualBox-6.0 \
    vnc-server \
    vsftpd \
    weechat \
    wine \
    wget \
    zlib \
    zlib-devel

  msg "NOTE: to use shared folders in VirtualBox, do: '# /usr/lib/virtualbox/vboxdrv.sh setup && usermod -a -G vboxusers $USER'"
  msg "NOTE: to enable Clang 5.x tools, do: '$ scl enable devtoolset-8 llvm-toolset-7 bash'"

  # KiCad install
  # Flatpak _should_ be installed by default in CentOS 7+
  flatpak install --from https://flathub.org/repo/appstream/org.kicad_pcb.KiCad.flatpakref

  pythonExe="pip3"

elif [ "$pkgApp" = "dnf" ]; then
  # Assuming standard, modern Fedora install
  sudo dnf -y groupinstall "Development Tools" \
    "C Development Tools and Libraries"

  sudo dnf -y install \
    acpid \
    apr-devel \
    bear \
    calibre \
    cargo \
    chrpath \
    clang \
    clang-analyzer \
    clang-devel \
    cmake \
    code \
    containerd.io \
    csbuild \
    curl-devel \
    dkms \
    docker-ce \
    docker-ce-cli \
    dtc \
    fd-find \
    gcc-gnat \
    gimp \
    ghdl \
    ghdl-grt \
    ghdl-llvm \
    ghdl-llvm-grt \
    gnome-system-monitor \
    gnome-tweaks \
    gnuradio \
    golang \
    google-chrome-stable \
    gqrx \
    gtkwave \
    htop \
    httpd-devel \
    hugo \
    infiniband-diags \
    inkscape \
    irssi \
    kernel-devel \
    kernel-headers \
    kicad \
    kicad-doc \
    kicad-packages3d \
    libgtop2-devel \
    libibverbs-utils \
    libyaml-devel \
    libusb \
    libusb-devel \
    libXi-devel \
    libXmu-devel \
    libX11-devel \
    llvm \
    llvm-devel \
    lm_sensors \
    mediawriter \
    mesa-libGLU-devel \
    minicom \
    mutt \
    nano \
    nasm \
    ncurses-compat-libs \
    neovim \
    NetworkManager-libnm-devel \
    nmap \
    nodejs \
    okular \
    openssl-devel \
    perl \
    python-devel \
    python3-devel \
    python3-neovim \
    python3-matplotlib \
    qemu \
    qemu-kvm \
    ranger \
    readline-devel \
    ripgrep \
    rpcgen \
    rtl-sdr \
    rtl-sdr-devel \
    ruby-devel \
    rust \
    ShellCheck \
    socat \
    sqlite-devel \
    stress \
    texlive-scheme-full \
    the_silver_searcher \
    tmux \
    vim \
    vim-X11 \
    VirtualBox \
    virtualbox-guest-additions \
    virtualenv \
    vsftpd \
    wine \
    wireshark \
    xclip \
    xorg-x11-drv-nvidia \
    xorg-x11-drv-nvidia-cuda \
    xrdp \
    xterm \
    zathura \
    zathura-plugins-all

  msg "GHDL: if seeing linking errors due to libgnat-* version mismatch see: https://forums.fedoraforum.org/showthread.php?318086-ghdl-in-Fedora-28"

  # SSH not started by default
  sudo systemctl start sshd.service
  sudo systemctl enable sshd.service

  # Enable xrdp remote desktop & open port
  sudo systemctl start xrdp
  sudo systemctl enable xrdp
  sudo firewall-cmd --add-port=3389/tcp --permanent
  sudo firewall-cmd --reload

  msg "NOTE: to use shared folders in VirtualBox, do: '# /usr/lib/virtualbox/vboxdrv.sh setup && usermod -a -G vboxusers $USER'"

  pythonExe="pip3"

elif [ "$pkgApp" = "brew" ]; then
  # NOTE: when using newer bash version, need to update default shell via https://apple.stackexchange.com/a/24635
  brew install \
    alacritty \
    awscli \
    bash \
    bash-completion \
    binutils \
    cmake \
    coreutils \
    ctags \
    diffutils \
    djvu2pdf \
    docker \
    docker-compose \
    doxygen \
    drawio \
    ed \
    editorconfig \
    fd \
    file-formula \
    findutils \
    fpp \
    gawk \
    gdb \
    gifski \
    git \
    gnu-indent \
    gnu-sed \
    gnu-tar \
    gnu-which\
    gnutls \
    go \
    google-chrome \
    gpatch \
    grep \
    gtkwave \
    gzip \
    handbrake \
    htop \
    hugo \
    icarus-verilog \
    irssi \
    kicad \
    less \
    m4 \
    mactex \
    make \
    mono \
    mutt \
    nano \
    neovim \
    netron \
    nmap \
    node \
    openssh \
    perl \
    pidof \
    plantuml \
    python \
    ranger \
    reattach-to-user-namespace \
    ripgrep \
    rust-analyzer \
    rsync \
    shellcheck \
    skim \
    svn \
    tcl-tk \
    the_silver_searcher \
    tmux \
    tree \
    unison \
    unzip \
    verilator \
    visual-studio-code \
    vlc \
    wakeonlan \
    watch \
    wdiff \
    wget \
    youtube-dl

  msg "install Java Dev Kit: http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html"
  brew cleanup

  # Seperately install Python Neovim support for macOS
  pip3 install neovim --upgrade
  pythonExe="pip3"

fi

msg "Installing npm packages"
npm install -g grunt-cli \
  gulp-cli \
  pyright \
  write-good

msg "Installing Gems"
if [ "$pkgApp" = "brew" ]; then
  sudo gem install iStats
else
  # Bundler already installed in macOS
  sudo gem install bundler
fi
sudo gem install jekyll \
  vimgolf

# Install Python packages w/pip as the current user
msg "Installing Python modules via pip"
#python -m pip install --user \
${pythonExe} install \
  black \
  build \
  cocotb \
  gprof2dot \
  h5py \
  hls4ml[profiling] \
  ipython \
  jupyter \
  jupyterlab \
  matplotlib \
  neovim-remote \
  nose \
  numpy \
  pandas \
  proselint \
  pytest \
  scikit-learn \
  scipy \
  seaborn \
  speedtest-cli \
  sympy \
  tensorflow-model-optimization \
  tqdm \
  vim-vint \
  vunit_hdl

###############################################################################
msg "Installing source-based programs"
###############################################################################

mkdir -p ~/src
pushd ~/src > /dev/null

# Facebook PathPicker install
# Note: this app install location can change
msg "Installing Facebook PathPicker from source..."
if [ -d "PathPicker" ]; then
  pushd PathPicker/ > /dev/null
  git pull
  popd > /dev/null
else
  git clone https://github.com/facebook/PathPicker.git
fi
fppInstallLoc=/usr/local/bin/fpp
if [ ! -f $fppInstallLoc ]; then
  sudo ln -s "$(pwd)"/PathPicker/fpp $fppInstallLoc
fi

# GHDL- FOSS VHDL compiler & simulator
msg "Installing GHDL from GitHub releases..."
msg "NOTE: Check for release updates at https://github.com/ghdl/ghdl/releases, currently using Nightly"
pushd /usr/local/ > /dev/null
if [ "$pkgApp" = "brew" ]; then
  GHDL_TARBALL="ghdl-macos-11-mcode.tgz"
elif [ "$pkgApp" = "apt" ]; then
  GHDL_TARBALL="ghdl-gha-ubuntu-22.04-mcode.tgz"
fi
sudo wget "https://github.com/ghdl/ghdl/releases/download/v3.0.0/$GHDL_TARBALL"
sudo tar -xzvf "$GHDL_TARBALL"
sudo rm -f "$GHDL_TARBALL"
popd > /dev/null

# Go Lang tools
msg "Installing Go from source..."
if [ -d /usr/local/go ]; then
  msg "Removing previous Go install"
  rm -rf /usr/local/go
fi
pushd /tmp/ > /dev/null
msg "NOTE: Check for Go release updates at https://golang.org/dl/"
goOS=$(uname | awk '{print tolower($0)}')
if [ "$(uname -m)" != "x86_64" ]; then
  err "Expecting x86_64 architecture to install Go!"
fi
wget "https://dl.google.com/go/go1.12.9.${goOS}-amd64.tar.gz"
sudo tar -C /usr/local/ -xzf "go1.12.9.${goOS}-amd64.tar.gz"
popd > /dev/null

# Mono-project repo & install
#TODO: Ubuntu & MacOS install method
msg "Installing Mono repo"
if [ "$pkgApp" = "yum" ]; then
  sudo rpm --import "http://keyserver.ubuntu.com/pks/lookup?op=get&search=0x3FA7E0328081BFF6A14DA29AA6A19B38D3D831EF"
  sudo yum-config-manager --add-repo http://download.mono-project.com/repo/centos7/
  sudo yum install -y mono-devel
elif [ "$pkgApp" != "dnf" ]; then
  sudo rpm --import "http://keyserver.ubuntu.com/pks/lookup?op=get&search=0x3FA7E0328081BFF6A14DA29AA6A19B38D3D831EF"
  su -c 'curl https://download.mono-project.com/repo/centos8-stable.repo | tee /etc/yum.repos.d/mono-centos8-stable.repo'
  sudo dnf update
  sudo dnf install -y mono-devel
fi

# Rust install
if [ "$pkgApp" != "dnf" ]; then
  msg "Installing Rust"
  curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh
fi

# Rust analyzer
mkdir -p ~/.local/bin/
if [ "$pkgApp" != "brew" ]; then
  curl -L https://github.com/rust-analyzer/rust-analyzer/releases/latest/download/rust-analyzer-x86_64-unknown-linux-gnu.gz | gunzip -c - > ~/.local/bin/rust-analyzer
  chmod +x ~/.local/bin/rust-analyzer
fi

# Rust package installs
rustup update
rustup component add clippy

# tmux 2.9a install from src
if [ "$pkgApp" != "brew" ] && [ "$pkgApp" != "dnf" ]; then
  msg "Installing tmux from source..."
  pushd /tmp/ > /dev/null
  msg "NOTE: Check for tmux release updates at https://github.com/tmux/tmux/releases"
  wget https://github.com/tmux/tmux/releases/download/2.9a/tmux-2.9a.tar.gz
  tar -xzf tmux-2.9a.tar.gz
  pushd tmux-2.9a > /dev/null
  ./configure && make
  sudo make install
  popd > /dev/null
  popd > /dev/null
fi

# Vim install from src w/clipboard & python support
if [ "$pkgApp" != "brew" ] && [ "$pkgApp" != "dnf" ]; then
  msg "Installing Vim from source..."
  # NOTE: remove shipping Vim
  if [ "$pkgApp" = "apt" ]; then
    sudo apt remove -y vim vim-common vim-runtime gvim
    sudo apt build-dep vim
  elif [ "$pkgApp" = "yum" ]; then
    sudo yum remove -y vim-enhanced vim-common
    sudo yum-builddep vim
  fi
  if [ -d "vim" ]; then
    pushd vim/ > /dev/null
    git pull
  else
    git clone https://github.com/vim/vim.git
    pushd vim/ > /dev/null
  fi
  ./configure --with-features=huge \
    --enable-multibyte \
    --enable-rubyinterp=yes \
    --enable-pythoninterp=yes \
    --enable-perlinterp=yes \
    --enable-gui=auto \
    --enable-gtk2-check \
    --with-x
  # If installing for single user (no `make install`) VIMRUNTIMEDIR can == {vim_src}/runtime
  make VIMRUNTIMEDIR=/usr/local/share/vim/vim80
  # sometimes `sudo` is removed with vim
  if ! command -v sudo > /dev/null; then
    if [ "$pkgApp" = "apt" ]; then
      su -c apt install -y sudo
    elif [ "$pkgApp" = "yum" ]; then
      su -c yum install -y sudo
    fi
  fi
  sudo make install
  hash vim
  popd > /dev/null
fi

# Ranger file manager (doesn't install in CentOS packages)
# Use source based install or `# pip install ranger-fm`
if [ "$pkgApp" = "yum" ]; then
  msg "Installing Ranger file manager"
  sudo pip install ranger-fm
  #wget http://nongnu.org/ranger/ranger-stable.tar.gz
  #tar xvf ranger-stable.tar.gz
  #pushd ranger-stable
  #make install
  #popd
fi

# install Ruby since most likely not pre-installed on *nix (except Fedora)
if [ "$pkgApp" != "brew" ] && [ "$pkgApp" != "dnf" ]; then
  msg "Installing Ruby"
  mkdir -p ~/.rbenv
  git clone https://github.com/rbenv/rbenv.git ~/.rbenv
  pushd ~/.rbenv > /dev/null
  src/configure
  make -C src
  export PATH="$HOME/.rbenv/bin:$PATH"
  eval "$(rbenv init -)"
  git clone git://github.com/sstephenson/ruby-build.git ~/.rbenv/plugins/ruby-build
  export PATH="$HOME/.rbenv/plugins/ruby-build/bin:$PATH"
  popd > /dev/null

  msg "Installing Ruby 2.4.1"
  rbenv install -v 2.4.1
  rbenv global 2.4.1
fi

# Patched fonts with Powerline and other symbols
msg "Installing Nerd Fonts"
if [ "$pkgApp" != "brew" ]; then
  pushd ~/src/ > /dev/null
  git clone https://github.com/ryanoasis/nerd-fonts.git --depth=1
  pushd fonts > /dev/null
  ./install.sh
  popd > /dev/null
  rm -rf fonts/
  popd > /dev/null
else
  # install nerd-fonts (https://github.com/ryanoasis/nerd-fonts#option-4-homebrew-fonts)
  brew tap homebrew/cask-fonts
  brew install --cask font-hack-nerd-font
fi


# Install Verilator from source on non-brew/macOS
if [ "$pkgApp" != "brew" ]; then
  msg "Installing Verilator"
  pushd ~/src/ > /dev/null
  git clone https://github.com/verilator/verilator
  pushd ~/verilator/ > /dev/null
  popd > /dev/null
  unset VERILATOR_ROOT
  # Use most recent stable release, or use branch "v{version}" for specific release
  git checkout stable
  autoconf
  # configure to install in system global location
  ./configure
  make -j "$(nproc)"
  sudo make install
  popd > /dev/null
fi


# Install Gnome extensions on Linux (assumed Gnome WDM)
if [ "$pkgApp" != "brew" ]; then
  msg "Installing Gnome Extensions"
  pushd ~/src/ > /dev/null

  git clone https://github.com/paradoxxxzero/gnome-shell-system-monitor-applet
  pushd gnome-shell-system-monitor-applet > /dev/null
  make install
  popd > /dev/null

  git clone git://gitlab.com/jenslody/gnome-shell-extension-openweather.git
  pushd gnome-shell-extension-openweather > /dev/null
  ./autogen.sh && make local-install
  popd > /dev/null

  git clone --depth=1 https://github.com/gTile/gTile.git
  pushd gTile > /dev/null
  bazel run :install-extension
  popd > /dev/null

  git clone https://github.com/adaxi/audio-output-switcher.git ~/.local/share/gnome-shell/extensions/audio-output-switcher@anduchs

  git clone https://LukasKnuth@bitbucket.org/LukasKnuth/backslide.git BackSlide
  pushd BackSlide > /dev/null
  # NOTE: there are multiple stable branches based on Gnome Version. EXAMPLE: Build for an older GnomeShell version
  # git checkout gnome-3.8 # ONLY if you need to!
  # "Compile" the settings-schema:
  glib-compile-schemas backslide\@codeisland.org/schemas/
  # Copy the files over to the local extension directory:
  cp -r backslide\@codeisland.org/ ~/.local/share/gnome-shell/extensions/
  popd > /dev/null

  # disable explicit Gnome version checking of extensions (prevents early breakage)
  dconf write /org/gnome/shell/disable-extension-version-validation true

  msg "Gnome Extensions installed: reload Gnome shell with Alt+F2, type 'r' and hit enter"
  msg "NOTE: local extensions can be enabled/disabled or installed/removed with https://extensions.gnome.org/ or 'gnome-tweaks' tool"
  popd > /dev/null
fi


popd > /dev/null


###############################################################################
msg "Installing config files and environment settings"
###############################################################################
pushd "$execPath" > /dev/null || exit

msg "Installing terminal settings. Run 'term_test' after to confirm proper operation."
if [ "$pkgApp" = "brew" ]; then
  # Add `tmux` terminal types to support italic/bold in tmux
  msg "NOTE: install iTerm2 backgrounds: https://github.com/mbadolato/iTerm2-Color-Schemes.git"
  tic -x ./configs/tmux.terminfo
elif [ "$pkgApp" != "dnf" ];then
  # Add `tmux` terminal types to support italic/bold in tmux (may not be needed for Fedora)
  tic -x ./configs/xterm-256color-italic.terminfo
  tic -x ./configs/tmux-256color.terminfo
fi

# check for brew package updates & git repo updates every 5 min
# pipe to /dev/null so we don't get entries in /var/mail/<user>
# NOTE: also add to local server
# 0 */4 * * * /usr/local/bin/backup_data
# NOTE: symbol hex codes from Nerd Fonts (https://www.nerdfonts.com/cheat-sheet)
#
msg "Installing crontab entries"
cronLine=""
if [ "$pkgApp" = "apt" ]; then
  cronLine='*/5 * * * * if [ $(/usr/bin/apt list --upgradable | wc -l) -ge 2 ] ; then printf " \uf31b Apt Updates Available: $(/usr/bin/apt list --upgradable | wc -l) " > /tmp/sys_package_updates; else echo "" > /tmp/sys_package_updates; fi
*/5 * * * * /usr/local/bin/check-rust-outdated &> /dev/null
*/5 * * * * /usr/local/bin/git-check-remote-changes &> /dev/null'
elif [ "$pkgApp" = "yum" ]; then
  cronLine='*/5 * * * * if [ $(/usr/bin/yum check-update | sed '1,/^$/d' | wc -l) -ge 1 ] ; then printf " \uf304 Yum Updates Available: $(/usr/bin/yum check-update | sed '1,/^$/d' | wc -l) " > /tmp/sys_package_updates; else echo "" > /tmp/sys_package_updates; fi
*/5 * * * * /usr/local/bin/check-rust-outdated &> /dev/null
*/5 * * * * /usr/local/bin/git-check-remote-changes &> /dev/null'
elif [ "$pkgApp" = "dnf" ]; then
  cronLine='*/5 * * * * if [ $(/usr/bin/dnf check-update | sed '1,/^$/d' | wc -l) -ge 1 ] ; then printf " \uf30b Dnf Updates Available: $(/usr/bin/dnf check-update | sed '1,/^$/d' | wc -l) " > /tmp/sys_package_updates; else echo "" > /tmp/sys_package_updates; fi
*/5 * * * * /usr/local/bin/check-rust-outdated &> /dev/null
*/5 * * * * /usr/local/bin/git-check-remote-changes &> /dev/null'
  # Backup directories every 4 hours:  0 */4 * * * /usr/local/bin/backup_data
elif [ "$pkgApp" = "brew" ]; then
  # Nerd Font char used explicitly here in cron command since there's some weirdness with printf on macOS...
  cronLine='*/5 * * * * /opt/homebrew/bin/brew update &> /dev/null && if [[ $(/opt/homebrew/bin/brew outdated) ]] ; then printf "  Brew Updates Available: $(/opt/homebrew/bin/brew outdated | wc -l | tr -s ' ') " > /tmp/sys_package_updates; else echo "" > /tmp/sys_package_updates; fi
*/5 * * * * /usr/local/bin/check-rust-outdated &> /dev/null
*/5 * * * * /usr/local/bin/git-check-remote-changes &> /dev/null'
fi
# NOTE: overwrites any crontab entries, echo current entries before pipe if looking to keep
echo "$cronLine" | crontab -
echo "Current cron jobs:"
crontab -l

# Create (if needed) mutt dirs & other files
mkdir -p ~/.mutt/jgentile/headers
mkdir -p ~/.mutt/jgentile/bodies
touch ~/.mutt/certificates
# get solarized color scheme
wget -O ~/.mutt/mutt-colors-solarized-dark-256.muttrc https://raw.githubusercontent.com/altercation/mutt-colors-solarized/master/mutt-colors-solarized-dark-256.muttrc

msg "Installing dotfiles"
./update_configs

msg "Installing scripts"
sudo ./install_scripts

msg "Pulling down remote repos & updating current ones"
./dev_utils/git/git-update-src-dirs

msg "Installing vim components..."
# vim-plug
mkdir -p ~/.vim/autoload
curl -fLo ~/.vim/autoload/plug.vim --create-dirs \
  https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
# Install plug-ins before first use
vim +'PlugInstall --sync' +qa
# YCM seems to be the only plug-in requiring this extra step...
~/.vim/plugged/YouCompleteMe/install.py --all

# Vim & KiCad Colorschemes
pushd ~/src > /dev/null
git clone https://github.com/flazz/vim-colorschemes.git --depth=1
mkdir -p ~/.vim/colors/
cp vim-colorschemes/colors/* ~/.vim/colors/
rm -rf vim-colorschemes/

git clone https://github.com/pointhi/kicad-color-schemes.git
pushd kicad-color-schemes > /dev/null
if [ "$(uname -s)" = "Darwin" ]; then
  python3 patch.py behave-dark/ ~/Library/Preferences/kicad
else
  python3 patch.py behave-dark/ ~/.config/kicad
fi
popd > /dev/null
popd > /dev/null

# KiCad Plugins
mkdir -p ~/.kicad_plugins
pushd ~/.kicad_plugins > /dev/null
git clone https://github.com/MitjaNemec/Kicad_action_plugins.git
mv Kicad_action_plugins/* ./
rm -rf Kicad_action_plugins/

git clone https://github.com/NilujePerchut/kicad_scripts.git
mv kicad_scripts/teardrops/ ./
rm -rf kicad_scripts/

git clone https://github.com/easyw/RF-tools-KiCAD.git

git clone https://github.com/easyw/kicad-action-scripts.git
mv kicad-action-scripts/CircularZone ./
mv kicad-action-scripts/ViaStitching ./
rm -rf kicad-action-scripts/
pip install pyclipper --user
popd > /dev/null

# install tmux plugin manager
git clone https://github.com/tmux-plugins/tpm ~/.tmux/plugins/tpm
msg "Tmux Plugin manager installed. NOTE: still need to install plugins with <prefix>+I"

popd > /dev/null

###############################################################################
# Pull down Git repos
###############################################################################

# Use GitHub REST API to get list of repos and automatically clone them into
# src/ directory
# Iterate through PAGE variable if more than 100 repos per user
PAGE=1
echo -e "\n${BLU}Pulling remotes from JohnnyGOX17 GitHub${NC}"
curl -# "https://api.github.com/users/JohnnyGOX17/repos?page=$PAGE&per_page=100" | grep -e 'git_url*' | cut -d \" -f 4 | xargs -L1 git clone 2> /dev/null
echo -e "\n${BLU}Pulling remotes from Gent-Systems GitHub${NC}"
curl -# "https://api.github.com/orgs/Gent-Systems/repos?page=$PAGE&per_page=100" | grep -e 'git_url*' | cut -d \" -f 4 | xargs -L1 git clone 2> /dev/null


###############################################################################
# Clean & exit
###############################################################################

msg "Deleting temp directory at $insPath"
popd > /dev/null
rm -rf $insPath*
msg "DONE!... Installs and updates successful\n"
