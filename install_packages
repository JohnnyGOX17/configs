#!/usr/bin/env bash
#
# Shell script to install all needed development tools and software
# Run as regular user
#
# -John Gentile
#

# exit on error
set -e

# Colors for printing
RED='\033[1;31m'
BLU='\033[1;34m'
NC='\033[0m'

# Path to temporary installation directory
insPath=/tmp/auto_sys_install/
# Path to where script was executed
execPath=$(pwd)

# Simple error handler function to print to stderr
err() {
  echo -e "${RED}[$(date +"%T")] ERROR:${NC} $@" >&2
  exit 1
}

# Simple message handler function
msg() {
  echo -e "\n${BLU}[$(date +"%T")]:${NC} $@\n"
}

if [[ $1 = "-h" ]]; then
  echo "Usage: ./install_packages"
  echo -e "\tInstall all packages"
  exit 0
fi

# Individual commands needing privilege scripted as sudo
if [[ $EUID -eq 0 ]]; then
  err "This script should be run as a regular user, exiting!"
fi


# Figure out what system and package manager we're using
if [ "$(uname -s)" = "Darwin" ]; then
  pkgApp=brew
elif command -v apt > /dev/null; then
  pkgApp=apt
elif command -v dnf > /dev/null; then # meant for modern Fedora distro
  pkgApp=dnf
elif command -v yum > /dev/null; then
  pkgApp=yum
else
  err "No supported package manager recognized, exiting!"
fi
msg "Using $pkgApp pakage manager for installation"

msg "Install started at: $(date)"
msg "Creating temp directory at: $insPath\n"
mkdir -p $insPath
pushd $insPath > /dev/null


###############################################################################
msg "Add Optional Repos: Update and upgrade"
###############################################################################

msg "Updating current repo lists and adding any additional groups"

if [ "$pkgApp" = "apt" ]; then

  # NOTE: a lot of these are out of date!

  # Brackets editor
  sudo apt-add-repository --yes ppa:webupd8team/brackets

  # Clang 5.0 repo
  # from https://askubuntu.com/questions/905205/installing-clang-5-0-and-using-c17
  echo "deb http://apt.llvm.org/xenial/ llvm-toolchain-xenial-5.0 main" > /etc/apt/sources.list.d/llvm.list
  wget -O - http://apt.llvm.org/llvm-snapshot.gpg.key | apt-key add -

  # Google Chrome repo
  echo "deb [arch=amd64] http://dl.google.com/linux/chrome/deb/ stable main" > /etc/apt/sources.list.d/google-chrome.list
  wget -O - https://dl-ssl.google.com/linux/linux_signing_key.pub | apt-key add -

  # KiCAD schematic & layout editor
  apt-add-repository --yes ppa:js-reynaud/kicad-4

  # Spotify music player repo
  apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys 0DF731E45CE24F27EEEB1450EFDC8610341D9410
  echo "deb http://repository.spotify.com stable non-free" > /etc/apt/sources.list.d/spotify.list

  # VirtualBox 5.x- use repo for Ubuntu 16.04 (Xenial)
  echo "deb http://download.virtualbox.org/virtualbox/debian xenial contrib" > /etc/apt/sources.list.d/virtualbox.list
  wget -O - https://www.virtualbox.org/download/oracle_vbox_2016.asc | apt-key add -

  # Wine stable 2.0+ and Play on linux
  dpkg --add-architecture i386
  wget -nc https://dl.winehq.org/wine-builds/Release.key
  apt-key add Release.key
  apt-add-repository --yes https://dl.winehq.org/wine-builds/ubuntu/
  rm Release.key

  # Weechat
  sh -c 'echo "deb https://weechat.org/ubuntu $(lsb_release -cs) main" >>  /etc/apt/sources.list.d/weechat.list'
  apt-key adv --keyserver keys.gnupg.net --recv-keys

  # Update and pull in all new repos
  sudo apt update
  # Use dist-upgrade to smart dependency changing and conflict resolution
  sudo apt -y dist-upgrade

elif [ "$pkgApp" = "yum" ]; then
  #msg "Installing Google chrome repo file"
  #sudo cat << EOF > /etc/yum.repos.d/google-chrome.repo
  #[google-chrome]
  #name=google-chrome
  #baseurl=http://dl.google.com/linux/chrome/rpm/stable/x86_64
  #enabled=1
  #gpgcheck=1
  #gpgkey=https://dl.google.com/linux/linux_signing_key.pub
  #EOF

  msg "Installing latest VirtualBox repo file"
  sudo wget http://download.virtualbox.org/virtualbox/rpm/rhel/virtualbox.repo -P /etc/yum.repos.d/

  msg "Install VSCode repos"
  sudo rpm --import https://packages.microsoft.com/keys/microsoft.asc
  sudo sh -c 'echo -e "[code]\nname=Visual Studio Code\nbaseurl=https://packages.microsoft.com/yumrepos/vscode\nenabled=1\ngpgcheck=1\ngpgkey=https://packages.microsoft.com/keys/microsoft.asc" > /etc/yum.repos.d/vscode.repo'

  msg "yum upgrade (update and remove obsolete packages)"
  # Clean cache if needed:
  # sudo yum clean all
  sudo yum -y upgrade
  sudo yum -y install epel-release

elif [ "$pkgApp" = "brew" ]; then
  # Install `brew` package manager (https://brew.sh/) if not yet present
  if command -v brew > /dev/null; then
    msg "Brew already present, continuing..."
  else
    msg "Installing Brew package manager..."
    /usr/bin/ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"
    brew install cask
    brew update
  fi

elif [ "$pkgApp" = "dnf" ]; then
  msg "Installing Google chrome repo file"
  sudo dnf install -y fedora-workstation-repositories
  sudo dnf config-manager --set-enabled google-chrome

  msg "Installing latest VirtualBox repo file"
  sudo wget http://download.virtualbox.org/virtualbox/rpm/fedora/virtualbox.repo -P /etc/yum.repos.d/

  msg "Install VSCode repos"
  sudo rpm --import https://packages.microsoft.com/keys/microsoft.asc
  sudo sh -c 'echo -e "[code]\nname=Visual Studio Code\nbaseurl=https://packages.microsoft.com/yumrepos/vscode\nenabled=1\ngpgcheck=1\ngpgkey=https://packages.microsoft.com/keys/microsoft.asc" > /etc/yum.repos.d/vscode.repo'

  sudo dnf -y upgrade

fi


###############################################################################
msg "Install Basic Development Parts & General Tools"
###############################################################################

# NOTE: If certain programs/packages are not wanted they can be easily commented out
msg "Installing applications using $pkgApp"

if [ "$pkgApp" = "apt" ]; then
  sudo apt-get -y --install-recommends install \
    autoconf \
    automake \
    bash-completion \
    bear \
    brackets \
    build-essential \
    bzip2 \
    calibre \
    checkinstall \
    cifs-utils \
    clang \
    clang-5.0 \
    clang-5.0-doc \
    clang-5.0-examples \
    cmake \
    curl \
    dkms \
    doxygen \
    editorconfig \
    exuberant-ctags \
    ffmpegthumbnailer \
    filezilla \
    fonts-powerline \
    g++ \
    gcc \
    gimp \
    git \
    gnat-5 \
    google-chrome-stable \
    graphviz \
    gtkwave \
    helix-cli \
    helix-p4d \
    highlight \
    htop \
    ike \
    irssi \
    kicad \
    libelf-dev \
    libevent-dev \
    libvirt-bin \
    lldb-5.0 \
    lld-5.0 \
    llvm \
    lm-sensors \
    make \
    mutt \
    nano \
    nasm \
    neovim \
    nmap \
    okular \
    playonlinux \
    python-dev \
    python3-dev \
    python-neovim \
    python3-neovim \
    python-pydot \
    python-pydot-ng \
    python-sphinx \
    qemu \
    qemu-kvm \
    ranger \
    remmina \
    remmina-plugin-rdp \
    remmina-plugin-secret \
    scrot \
    shellcheck \
    silversearcher-ag \
    spotify-client \
    stress \
    tcl \
    tree \
    unrar \
    urlview \
    virtualbox-5.2 \
    visualboyadvance \
    visualboyadvance-gtk \
    vlc \
    w3m \
    w3m-img \
    weechat \
    wget \
    winehq-stable \
    xclip

  sudo apt -y autoremove

elif [ "$pkgApp" = "yum" ]; then
  sudo yum -y install yum-utils
  sudo yum -y groupinstall "Development Tools" \
    "Compatibility Libraries" \
    #"GNOME Desktop" \
    "Security Tools" \
    "System Administration Tools"

  sudo yum install -y \
    apr-devel \
    apr-util-cdevel \
    autoconf \
    automake \
    bash-completion \
    bison \
    bzip2 \
    calibre \
    centos-release-scl \
    cifs-utils \
    clang \
    clang-analyzer \
    clang-devel \
    cmake \
    code \
    ctags \
    curl \
    curl-devel \
    devtoolset-8 \
    g++ \
    gcc \
    gcc-arm-linux-gnu \
    gcc-c++ \
    gimp \
    git-core \
    gnome-tweaks \
    google-chrome-stable \
    gtkwave \
    htop \
    httpd \
    httpd-devel \
    ibutils \
    infiniband-diags \
    kernel-devel \
    kernel-doc \
    libelf-devel \
    libffi-devel \
    libibcommon \
    libibverbs \
    libibverbs-utils \
    libtool \
    libyaml-devel \
    llvm \
    llvm-devel \
    llvm-libs \
    llvm-toolset-7 \
    llvm-toolset-7-build \
    llvm-toolset-7-clang-analyzer \
    llvm-toolset-7-clang-devel \
    llvm-toolset-7-clang-tools-extra \
    llvm-toolset-7-llvm-devel \
    make \
    nano \
    nasm \
    neovim \
    nmap \
    nodejs \
    npm \
    okular \
    openssl-devel \
    patch \
    perftest \
    python-devel \
    python34 \
    python34-devel \
    python3-neovim \
    qemu \
    qemu-kvm \
    qperf \
    readline \
    readline-devel \
    sqlite-devel \
    stress \
    the_silver_searcher \
    tmux \
    vim \
    VirtualBox-6.0 \
    vnc-server \
    vsftpd \
    weechat \
    wine \
    wget \
    zlib \
    zlib-devel

  msg "NOTE: to use shared folders in VirtualBox, do: '# /usr/lib/virtualbox/vboxdrv.sh setup && usermod -a -G vboxusers $USER'"
  msg "NOTE: to enable Clang 5.x tools, do: '$ scl enable devtoolset-8 llvm-toolset-7 bash'"

  # KiCad install
  # Flatpak _should_ be installed by default in CentOS 7+
  flatpak install --from https://flathub.org/repo/appstream/org.kicad_pcb.KiCad.flatpakref

elif [ "$pkgApp" = "dnf" ]; then
  # Assuming standard, modern Fedora install
  sudo dnf -y groupinstall "Development Tools" \
    "C Development Tools and Libraries"

  sudo dnf -y install \
    acpid \
    apr-devel \
    bear \
    calibre \
    cargo \
    clang \
    clang-analyzer \
    clang-devel \
    cmake \
    code \
    csbuild \
    curl-devel \
    dkms \
    gcc-gnat \
    gimp \
    ghdl \
    gnome-tweaks \
    golang \
    google-chrome-stable \
    gtkwave \
    htop \
    httpd-devel \
    infiniband-diags \
    irssi \
    kernel-devel \
    kernel-headers \
    kicad \
    libibverbs-utils \
    libyaml-devel \
    libXi-devel \
    libXmu-devel \
    libX11-devel \
    llvm \
    llvm-devel \
    lm_sensors \
    mediawriter \
    mesa-libGLU-devel \
    mutt \
    nano \
    nasm \
    neovim \
    nmap \
    nodejs \
    okular \
    openssl-devel \
    perl \
    powerline-fonts \
    python-devel \
    python3-devel \
    python3-neovim \
    qemu \
    qemu-kvm \
    ranger \
    readline-devel \
    ruby-devel \
    rust \
    sqlite-devel \
    stress \
    the_silver_searcher \
    tmux \
    vim \
    vim-X11 \
    VirtualBox-6.0 \
    vsftpd \
    wine \
    xclip \
    xrdp

  # Follow steps to install NVIDIA drivers like: https://www.if-not-true-then-false.com/2015/fedora-nvidia-guide/
  # And/or install CUDA: https://www.if-not-true-then-false.com/2018/install-nvidia-cuda-toolkit-on-fedora/

  msg "GHDL: if seeing linking errors due to libgnat-* version mismatch see: https://forums.fedoraforum.org/showthread.php?318086-ghdl-in-Fedora-28"

  # SSH not started by default
  sudo systemctl start sshd.service
  sudo systemctl enable sshd.service

  # Enable xrdp remote desktop & open port
  sudo systemctl start xrdp
  sudo systemctl enable xrdp
  sudo firewall-cmd --add-port=3389/tcp --permanent
  sudo firewall-cmd --reload

  msg "NOTE: to use shared folders in VirtualBox, do: '# /usr/lib/virtualbox/vboxdrv.sh setup && usermod -a -G vboxusers $USER'"

elif [ "$pkgApp" = "brew" ]; then
  brew cask install \
    amethyst \
    calibre \
    google-chrome \
    iterm2 \
    visual-studio-code \
    vlc

  brew install \
    awscli \
    bash \
    bash-completion \
    binutils \
    cmake \
    coreutils \
    ctags \
    diffutils \
    doxygen \
    ed --with-default-names \
    editorconfig \
    file-formula \
    findutils --with-default-names \
    fpp \
    gawk \
    gdb \
    git \
    gnu-indent --with-default-names \
    gnu-sed --with-default-names \
    gnu-tar --with-default-names \
    gnu-which --with-default-names \
    gnutls \
    gpatch \
    grep --with-default-names \
    gtkwave \
    gzip \
    htop \
    icarus-verilog \
    irssi \
    less \
    m4 \
    make \
    mono \
    mutt \
    nano \
    neovim \
    nmap \
    node \
    openssh \
    perl \
    pidof \
    python \
    # `python` should now default to Python 3 in brew
    python@2 \
    ranger \
    reattach-to-user-namespace \
    rsync \
    svn \
    tcl-tk \
    the_silver_searcher \
    tmux \
    tree \
    unzip \
    vim --override-system-vi \
    # macvim --override-system-vim --custom-system-icons \
    wakeonlan \
    watch \
    wdiff --with-gettext \
    weechat \
    wget \
    wine \
    winetricks

  msg "install Java Dev Kit: http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html"
  brew cleanup

  # Seperately install Python Neovim support for macOS
  #pip2 install neovim --upgrade
  pip3 install neovim --upgrade

fi

msg "Installing npm packages"
sudo npm install -g grunt-cli \
  gulp-cli \
  write-good

msg "Installing Gems"
sudo gem install bundler \
  jekyll \
  vimgolf
if [ "$pkgApp" = "brew" ]; then
  sudo gem install iStats
fi

# TODO: system dependent pip?
msg "Installing Python modules via pip"
sudo pip install awscli \
  proselint \
  speedtest-cli \
  vim-vint

###############################################################################
msg "Installing source-based programs"
###############################################################################

mkdir -p ~/src
pushd ~/src > /dev/null

# Facebook PathPicker install
# Note: this app install location can change
msg "Installing Facebook PathPicker from source..."
if [ -d "PathPicker" ]; then
  pushd PathPicker/ > /dev/null
  git pull
  popd > /dev/null
else
  git clone https://github.com/facebook/PathPicker.git
fi
fppInstallLoc=/usr/local/bin/fpp
if [ ! -f $fppInstallLoc ]; then
  sudo ln -s $(pwd)/PathPicker/fpp $fppInstallLoc
fi

# GHDL- FOSS VHDL compiler & simulator
if [ "$pkgApp" = "brew" ]; then
  msg "NOTE: Check for macOS release updates at https://github.com/ghdl/ghdl/releases"
  pushd /usr/local/ > /dev/null
  wget https://github.com/ghdl/ghdl/releases/download/v0.36/ghdl-0.36-macosx-llvm.tgz
  tar -xzvf ghdl-0.36-macosx-llvm.tgz
  rm -f ghdl-0.36-macosx-llvm.tgz
  popd > /dev/null
elif [ "$pkgApp" != "dnf" ]; then
  msg "Installing GHDL from source..."
  if [ -d "ghdl" ]; then
    pushd ghdl/ > /dev/null
    git pull
  else
    git clone https://github.com/ghdl/ghdl.git
    pushd ghdl/ > /dev/null
  fi
  mkdir -p build
  pushd build/
  ../configure --with-llvm-config --prefix=/usr/local
  make
  sudo make install
  popd > /dev/null
  popd > /dev/null
fi

# Go Lang tools
msg "Installing Go from source..."
if [ -d /usr/local/go ]; then
  msg "Removing previous Go install"
  rm -rf /usr/local/go
fi
pushd /tmp/ > /dev/null
msg "NOTE: Check for Go release updates at https://golang.org/dl/"
goOS=$(echo "$(uname)" | awk '{print tolower($0)}')
if [ "$(uname -m)" != "x86_64" ]; then
  err "Expecting x86_64 architecture to install Go!"
fi
wget https://dl.google.com/go/go1.12.9.${goOS}-amd64.tar.gz
sudo tar -C /usr/local/ -xzf go1.12.9.${goOS}-amd64.tar.gz
popd > /dev/null

# Mono-project repo & install
#TODO: Ubuntu & MacOS install method
msg "Installing Mono repo"
if [ "$pkgApp" = "yum" ]; then
  sudo rpm --import "http://keyserver.ubuntu.com/pks/lookup?op=get&search=0x3FA7E0328081BFF6A14DA29AA6A19B38D3D831EF"
  sudo yum-config-manager --add-repo http://download.mono-project.com/repo/centos7/
  sudo yum install -y mono-devel
elif [ "$pkgApp" != "dnf" ]; then
  sudo rpm --import "http://keyserver.ubuntu.com/pks/lookup?op=get&search=0x3FA7E0328081BFF6A14DA29AA6A19B38D3D831EF"
  su -c 'curl https://download.mono-project.com/repo/centos8-stable.repo | tee /etc/yum.repos.d/mono-centos8-stable.repo'
  sudo dnf update
  sudo dnf install -y mono-devel
fi

# Rust install
if [ "$pkgApp" != "dnf" ]; then
  msg "Installing Rust"
  curl https://sh.rustup.rs -sSf | sh
fi

# tmux 2.9a install from src
if [ "$pkgApp" != "brew" ] && [ "$pkgApp" != "dnf" ]; then
  msg "Installing tmux from source..."
  pushd /tmp/ > /dev/null
  msg "NOTE: Check for tmux release updates at https://github.com/tmux/tmux/releases"
  wget https://github.com/tmux/tmux/releases/download/2.9a/tmux-2.9a.tar.gz
  tar -xzf tmux-2.9a.tar.gz
  pushd tmux-2.9a > /dev/null
  ./configure && make
  sudo make install
  popd > /dev/null
  popd > /dev/null
fi

# Vim install from src w/clipboard & python support
if [ "$pkgApp" != "brew" ] && [ "$pkgApp" != "dnf" ]; then
  msg "Installing Vim from source..."
  # NOTE: remove shipping Vim
  if [ "$pkgApp" = "apt" ]; then
    sudo apt remove -y vim vim-common vim-runtime gvim
    sudo apt build-dep vim
  elif [ "$pkgApp" = "yum" ]; then
    sudo yum remove -y vim-enhanced vim-common
    sudo yum-builddep vim
  fi
  if [ -d "vim" ]; then
    pushd vim/ > /dev/null
    git pull
  else
    git clone https://github.com/vim/vim.git
    pushd vim/ > /dev/null
  fi
  ./configure --with-features=huge \
    --enable-multibyte \
    --enable-rubyinterp=yes \
    --enable-pythoninterp=yes \
    --enable-perlinterp=yes \
    --enable-gui=auto \
    --enable-gtk2-check \
    --with-x
  # If installing for single user (no `make install`) VIMRUNTIMEDIR can == {vim_src}/runtime
  make VIMRUNTIMEDIR=/usr/local/share/vim/vim80
  # sometimes `sudo` is removed with vim
  if ! command -v sudo > /dev/null; then
    if [ "$pkgApp" = "apt" ]; then
      su -c apt install -y sudo
    elif [ "$pkgApp" = "yum" ]; then
      su -c yum install -y sudo
    fi
  fi
  sudo make install
  hash vim
  popd > /dev/null
fi

# Ranger file manager (doesn't install in CentOS packages)
# Use source based install or `# pip install ranger-fm`
if [ "$pkgApp" = "yum" ]; then
  msg "Installing Ranger file manager"
  sudo pip install ranger-fm
  #wget http://nongnu.org/ranger/ranger-stable.tar.gz
  #tar xvf ranger-stable.tar.gz
  #pushd ranger-stable
  #make install
  #popd
fi

# install Ruby since most likely not pre-installed on *nix (except Fedora)
if [ "$pkgApp" != "brew" ] && [ "$pkgApp" != "dnf" ]; then
  msg "Installing Ruby"
  mkdir -p ~/.rbenv
  git clone https://github.com/rbenv/rbenv.git ~/.rbenv
  pushd ~/.rbenv > /dev/null
  src/configure
  make -C src
  export PATH="$HOME/.rbenv/bin:$PATH"
  eval "$(rbenv init -)"
  git clone git://github.com/sstephenson/ruby-build.git ~/.rbenv/plugins/ruby-build
  export PATH="$HOME/.rbenv/plugins/ruby-build/bin:$PATH"
  popd > /dev/null

  msg "Installing Ruby 2.4.1"
  rbenv install -v 2.4.1
  rbenv global 2.4.1
fi

# Note meslo S is a good macOS-like powerline font
msg "Installing Powerline fonts"
if [ "$pkgApp" != "apt" ] && [ "$pkgApp" != "dnf" ]; then
  pushd ~/src/ > /dev/null
  git clone https://github.com/powerline/fonts.git --depth=1
  pushd fonts > /dev/null
  ./install.sh
  popd > /dev/null
  rm -rf fonts/
  popd > /dev/null
fi

popd > /dev/null


###############################################################################
msg "Installing config files and environment settings"
###############################################################################
pushd $execPath > /dev/null

msg "Installing terminal settings. Run 'term_test' after to confirm proper operation."
if [ "$pkgApp" = "brew" ]; then
  # Add `tmux` terminal types to support italic/bold in tmux
  msg "NOTE: install iTerm2 backgrounds: https://github.com/mbadolato/iTerm2-Color-Schemes.git"
  tic -x ./configs/tmux.terminfo
elif [ "$pkgApp" != "dnf" ];then
  # Add `tmux` terminal types to support italic/bold in tmux (may not be needed for Fedora)
  tic -x ./configs/xterm-256color-italic.terminfo
  tic -x ./configs/tmux-256color.terminfo
fi

# check for brew package updates every 5 min
msg "Installing crontab entries"
cronLine=""
if [ "$pkgApp" = "apt" ]; then
  cronLine='*/5 * * * * if [ $(/usr/bin/apt list --upgradable | wc -l) -ge 2 ] ; then echo " ⚑ Apt Updates Available: $(/usr/bin/apt list --upgradable | wc -l) " > /tmp/sys_package_updates; else echo "" > /tmp/sys_package_updates; fi'
elif [ "$pkgApp" = "yum" ]; then
  cronLine='*/5 * * * * if [ $(/usr/bin/yum check-update | sed '1,/^$/d' | wc -l) -ge 1 ] ; then echo " ⚑ Yum Updates Available: $(/usr/bin/yum check-update | sed '1,/^$/d' | wc -l) " > /tmp/sys_package_updates; else echo "" > /tmp/sys_package_updates; fi'
elif [ "$pkgApp" = "dnf" ]; then
  cronLine='*/5 * * * * if [ $(/usr/bin/dnf check-update | sed '1,/^$/d' | wc -l) -ge 1 ] ; then echo " ⚑ Dnf Updates Available: $(/usr/bin/dnf check-update | sed '1,/^$/d' | wc -l) " > /tmp/sys_package_updates; else echo "" > /tmp/sys_package_updates; fi'
  # Backup directories every 4 hours:  0 */4 * * * /usr/local/bin/backup_data
elif [ "$pkgApp" = "brew" ]; then
  cronLine='*/5 * * * * /usr/local/bin/brew update &> /dev/null && if [ -n "(/usr/local/bin/brew outdated)" ] ; then echo " ⚑ Brew Updates Available: $(/usr/local/bin/brew outdated | wc -l | tr -s ' ') " > /tmp/sys_package_updates; else echo "" > /tmp/sys_package_updates; fi'
fi
# NOTE: overwrites any crontab entries, echo current entries before pipe if looking to keep
echo "$cronLine" | crontab -
echo "Current cron jobs:"
crontab -l

# Create (if needed) mutt dirs & other files
mkdir -p ~/.mutt/jgentile/headers
mkdir -p ~/.mutt/jgentile/bodies
touch ~/.mutt/certificates
# get solarized color scheme
wget -O ~/.mutt/mutt-colors-solarized-dark-256.muttrc https://raw.githubusercontent.com/altercation/mutt-colors-solarized/master/mutt-colors-solarized-dark-256.muttrc

msg "Installing dotfiles"
./update_configs

msg "Installing scripts"
sudo ./install_scripts

msg "Pulling down remote repos & updating current ones"
./dev_utils/git/git-update-src-dirs

msg "Installing vim components..."
# vim-plug
mkdir -p ~/.vim/autoload
curl -fLo ~/.vim/autoload/plug.vim --create-dirs \
  https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
# Install plug-ins before first use
vim +'PlugInstall --sync' +qa
# YCM seems to be the only plug-in requiring this extra step...
~/.vim/plugged/YouCompleteMe/install.py --all

# vim-colorschemes
pushd ~/src > /dev/null
git clone https://github.com/flazz/vim-colorschemes.git --depth=1
mkdir -p ~/.vim/colors/
cp vim-colorschemes/colors/* ~/.vim/colors/
rm -rf vim-colorschemes/
popd > /dev/null

popd > /dev/null

###############################################################################
# Clean & exit
###############################################################################

msg "Deleting temp directory at $insPath"
popd > /dev/null
rm -rf $insPath*
msg "DONE!... Installs and updates successful\n"
