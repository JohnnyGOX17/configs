#!/bin/bash
# File              : generate-sitemap
# Author            : John Gentile <johncgentile17@gmail.com>
# Date              : 20.02.2018
# Last Modified Date: 20.02.2018
# Last Modified By  : John Gentile <johncgentile17@gmail.com>
#
# Simple bash script to generate `sitemap.xml` for a website given a certain
# directory pattern based on standard https://www.sitemaps.org/protocol.html
# and time based on W3C standard https://www.w3.org/TR/NOTE-datetime
#

# Extended header for sitemap schema validation
header='<?xml version="1.0" encoding="UTF-8"?>
<urlset xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.sitemaps.org/schemas/sitemap/0.9 http://www.sitemaps.org/schemas/sitemap/0.9/sitemap.xsd" xmlns="http://www.sitemaps.org/schemas/sitemap/0.9">'

# Standard value to indicate to search engines how frequently the page is
# likely to change (default: weekly)
changeFrequency="weekly"
domain=""
searchDir="./* ./**/*"

usage() { echo 'Usage: ./generate-sitemap -d "http://example.com/" [-s <search dir>] [-c <change frequency>]' 1>&2; exit 1; }

# Process passed in options
while getopts ":d:s:c:" o; do
  case "${o}" in
    d)
      domain=${OPTARG}
      ;;
    s)
      searchDir=${OPTARG}
      ;;
    c)
      changeFrequency=${OPTARG}
      ;;
    *)
      usage
      ;;
  esac
done
shift $((OPTIND-1))

if [ -z "$domain" ]; then
  echo "Domain string, -d, must not be blank!"
  usage
fi

###############################################################################
# Start printing to stdout
###############################################################################

printf "%s\n" "$header"

# For bash >=4.0, allow advanced globbing
shopt -s globstar
for file in $searchDir; do
  printf "\t<url>\n"
  printf "\t\t<loc>%s%s</loc>\n" "$domain" "$( realpath --relative-to='.' $file )"
  #$(basename "$file")

  # Reformat output of `stat` for file of interest to time standard
  printf "\t\t<lastmod>%s</lastmod>\n" "$( stat $file | awk '/^Modify/ {split($3, a, ".", seps); print $2 "T" a[1] substr($4, 1, 3) ":" substr($4, 4, 4)}' - )"

  printf "\t\t<changefreq>%s</changefreq>\n" "$changeFrequency"
  printf "\t</url>\n"
done

# Close out XML
printf "</urlset>\n"
